<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>俺専用バスナビ v8.0 (Stylish)</title>
  <link rel="apple-touch-icon" href="apple-touch-icon.png">
  <link rel="icon" href="apple-touch-icon.png">
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">

  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      --dark-bg: #0a0a0f;
      --card-bg: rgba(255, 255, 255, 0.05);
      --glass-bg: rgba(255, 255, 255, 0.1);
      --text-primary: #ffffff;
      --text-secondary: #b8bcc8;
      --text-accent: #4facfe;
      --border-glass: rgba(255, 255, 255, 0.2);
      --shadow-glow: 0 8px 32px rgba(102, 126, 234, 0.2);
      --shadow-card: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      background: var(--dark-bg);
      background-image: 
        radial-gradient(circle at 20% 80%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(118, 75, 162, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, rgba(79, 172, 254, 0.05) 0%, transparent 50%);
      color: var(--text-primary);
      font-family: 'Noto Sans JP', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      margin: 0;
      padding: 20px;
      text-align: center;
      min-height: 100vh;
      backdrop-filter: blur(10px);
    }

    .container {
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      animation: fadeInUp 0.8s ease-out;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.02); }
    }

    @keyframes glow {
      0%, 100% { box-shadow: var(--shadow-card); }
      50% { box-shadow: var(--shadow-glow); }
    }

    h1 {
      font-size: 2em;
      font-weight: 700;
      margin-bottom: 20px;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
    }

    #currentTime {
      font-size: 1.8em;
      color: var(--text-accent);
      font-weight: 500;
      margin: 20px 0;
      text-shadow: 0 0 20px rgba(79, 172, 254, 0.5);
      animation: pulse 2s infinite;
    }

    #nextBusResult {
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-glass);
      border-radius: 24px;
      padding: 30px;
      margin: 30px 0;
      box-shadow: var(--shadow-card);
      transition: all 0.3s ease;
      animation: glow 3s infinite;
    }

    #nextBusResult:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-glow);
    }

    .departure-time-main {
      font-size: clamp(3.2em, 14vw, 4em);
      font-weight: 700;
      background: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1.2;
      margin-bottom: 15px;
      text-shadow: 0 0 50px rgba(79, 172, 254, 0.3);
    }

    .time-remaining {
      font-size: 1.6em;
      color: var(--text-accent);
      font-weight: 500;
      min-height: 1.8em;
      text-shadow: 0 0 15px rgba(79, 172, 254, 0.4);
    }

    #nextBusResult .details {
      display: flex;
      justify-content: center;
      gap: 12px;
      margin-top: 20px;
      flex-wrap: wrap;
    }

    .detail-tag {
      padding: 10px 18px;
      border-radius: 20px;
      font-size: 1em;
      font-weight: 500;
      background: var(--glass-bg);
      backdrop-filter: blur(10px);
      border: 1px solid var(--border-glass);
      color: var(--text-primary);
      transition: all 0.3s ease;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .detail-tag:hover {
      transform: translateY(-2px);
      background: var(--secondary-gradient);
      box-shadow: 0 4px 15px rgba(240, 147, 251, 0.3);
    }

    .divider {
      border: none;
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--border-glass), transparent);
      margin: 25px 0;
    }

    #secondNextBus {
      min-height: 2.5em;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 10px;
    }

    #secondNextBus .info,
    #secondNextBus .countdown {
      display: flex;
      gap: 12px;
      align-items: center;
      font-size: 0.95em;
      color: var(--text-secondary);
    }

    #secondNextBus .time {
      font-weight: 600;
      color: var(--text-accent);
    }

    .button-container {
      display: flex;
      justify-content: center;
      gap: 12px;
      flex-wrap: wrap;
      margin: 20px 0;
    }

    #busStopContainer {
      margin: 40px 0 20px 0;
    }

    #routeFilterContainer {
      margin-bottom: 40px;
    }

    .filter-button {
      font-size: 1em;
      padding: 14px 24px;
      border: 1px solid var(--border-glass);
      border-radius: 16px;
      background: var(--glass-bg);
      backdrop-filter: blur(10px);
      color: var(--text-primary);
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
      position: relative;
      overflow: hidden;
    }

    .filter-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: var(--primary-gradient);
      transition: left 0.3s ease;
      z-index: -1;
    }

    .filter-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
    }

    .filter-button:hover::before {
      left: 0;
    }

    .filter-button.active {
      background: var(--primary-gradient);
      color: var(--text-primary);
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
      transform: translateY(-2px);
    }

    .route-filter-button {
      padding: 10px 18px;
      font-size: 0.9em;
    }

    #upcomingBusesResult {
      text-align: left;
      animation: fadeIn 0.5s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .bus-item {
      background: var(--glass-bg);
      backdrop-filter: blur(15px);
      border: 1px solid var(--border-glass);
      border-radius: 16px;
      padding: 20px;
      margin-bottom: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .bus-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--accent-gradient);
    }

    .bus-item:hover {
      transform: translateX(8px);
      background: rgba(255, 255, 255, 0.08);
      box-shadow: 0 4px 20px rgba(79, 172, 254, 0.2);
    }

    .bus-item .time {
      font-size: 1.6em;
      font-weight: 600;
      color: var(--text-primary);
    }

    .bus-item .route {
      font-size: 1em;
      color: var(--text-secondary);
      padding: 6px 12px;
      background: var(--glass-bg);
      border-radius: 12px;
      border: 1px solid var(--border-glass);
    }

    footer {
      margin-top: 60px;
      padding: 30px;
      border-top: 1px solid var(--border-glass);
      font-size: 0.85em;
      color: var(--text-secondary);
      background: rgba(255, 255, 255, 0.02);
      backdrop-filter: blur(10px);
      border-radius: 16px;
    }

    footer a {
      color: var(--text-accent);
      text-decoration: none;
      transition: all 0.3s ease;
    }

    footer a:hover {
      text-decoration: underline;
      text-shadow: 0 0 10px rgba(79, 172, 254, 0.5);
    }

    footer p {
      margin: 12px 0;
    }

    #backToTopButton {
      display: none;
      position: fixed;
      bottom: 30px;
      right: 30px;
      z-index: 99;
      border: none;
      outline: none;
      background: var(--primary-gradient);
      color: white;
      cursor: pointer;
      padding: 16px 20px;
      border-radius: 20px;
      font-size: 1.2em;
      box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    #backToTopButton:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
    }

    /* レスポンシブ対応 */
    @media (max-width: 480px) {
      .container {
        padding: 0 10px;
      }
      
      h1 {
        font-size: 1.6em;
      }
      
      #nextBusResult {
        padding: 20px;
        margin: 20px 0;
      }
      
      .filter-button {
        padding: 12px 18px;
        font-size: 0.9em;
      }
      
      .button-container {
        gap: 8px;
      }
    }

    /* ローディングアニメーション */
    .loading {
      animation: loadingPulse 1.5s infinite;
    }

    @keyframes loadingPulse {
      0%, 100% { opacity: 0.6; }
      50% { opacity: 1; }
    }
  </style>
</head>
<body>

  <div class="container">
    <h1>俺専用バスナビ</h1>
    <div id="currentTime">--:--:--</div>
    
    <div id="nextBusResult">
      <div class="departure-time-main loading">読み込み中...</div>
      <div class="time-remaining"></div>
      <div class="details"></div>
      <hr class="divider">
      <div id="secondNextBus"></div>
    </div>
    
    <div id="busStopContainer" class="button-container">
      <button class="filter-button" data-stop="yokodaikita">洋光台北口</button>
      <button class="filter-button" data-stop="hinosyo">日野小学校前</button>
      <button class="filter-button" data-stop="hinotyuokouen">日野中央公園入口</button>
    </div>
    <div id="routeFilterContainer" class="button-container">
      <button class="filter-button route-filter-button" data-route="all">すべて</button>
      <button class="filter-button route-filter-button" data-route="市営111">市営111</button>
      <button class="filter-button route-filter-button" data-route="市営64">市営64</button>
      <button class="filter-button route-filter-button" data-route="市営2">市営2</button>
    </div>
    <div id="upcomingBusesResult"><p style="color: #888;">上のバス停ボタンを押してください</p></div>
  </div>
  
  <footer>
    <p>最終更新日: 2025/07/27</p>
    <p>この時刻が間違っていても責任は負いかねます。<br>正確な情報は<a href="https://www.city.yokohama.lg.jp/kotsu/bus/" target="_blank" rel="noopener noreferrer">横浜市営バス公式サイト</a>をご確認ください。</p>
  </footer>
  
  <button id="backToTopButton">▲</button>

  <script>
    const API_URL = "./bus_data.json";
    
    // --- グローバル変数 ---
    let allBusData = [];
    let nextBus = null;
    let secondBus = null;
    const busStopNames = { yokodaikita: "洋光台北口", hinosyo: "日野小学校前", hinotyuokouen: "日野中央公園入口" };
    let currentStopId = null;
    let currentRouteFilter = 'all';
    
    // --- HTML要素の取得 ---
    const currentTimeDiv = document.getElementById('currentTime');
    const busStopButtons = document.querySelectorAll('#busStopContainer .filter-button');
    const routeFilterButtons = document.querySelectorAll('#routeFilterContainer .filter-button');
    const upcomingBusesResultDiv = document.getElementById('upcomingBusesResult');
    const backToTopButton = document.getElementById('backToTopButton');
    const mainTimeDiv = document.querySelector('.departure-time-main');
    const remainingTimeDiv = document.querySelector('.time-remaining');
    const detailsDiv = document.querySelector('.details');
    const secondNextBusDiv = document.getElementById('secondNextBus');

    // --- メインロジック ---

    // 1. 初期化処理
    document.addEventListener('DOMContentLoaded', async () => {
      setInterval(() => {
        const now = new Date();
        currentTimeDiv.textContent = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;
      }, 1000);

      try {
        const response = await fetch(API_URL);
        const data = await response.json();
        const today = new Date();
        const y = today.getFullYear();
        const m = today.getMonth();
        const d = today.getDate();
        allBusData = data.map(bus => {
          const [h, min] = bus.time.split(':').map(Number);
          bus.departureTimestamp = new Date(y, m, d, h, min).getTime();
          return bus;
        }).sort((a, b) => a.departureTimestamp - b.departureTimestamp);

        mainTimeDiv.classList.remove('loading');
        findAndSetNextBuses();
        setInterval(updateCountdowns, 1000);
        setInterval(findAndSetNextBuses, 30000);
        document.querySelector('.filter-button[data-route="all"]').classList.add('active');
      } catch (error) { 
        console.error("データ取得エラー:", error); 
        mainTimeDiv.classList.remove('loading');
        mainTimeDiv.textContent = "取得失敗"; 
      }
    });

    // 2. 次のバスを探す
    function findAndSetNextBuses() {
      const targetStops = ['yokodaikita', 'hinosyo'];
      const now = new Date().getTime();
      const availableBuses = allBusData.filter(bus => targetStops.includes(bus.busStop) && bus.departureTimestamp >= now);
      nextBus = availableBuses[0] || null;
      secondBus = availableBuses[1] || null;
      displayStaticInfo();
    }

    // 3. 残り時間を毎秒更新
    function updateCountdowns() {
      if (!nextBus) return;
      const now = new Date().getTime();
      const diff1 = nextBus.departureTimestamp - now;
      if (diff1 < 0) { findAndSetNextBuses(); return; }
      remainingTimeDiv.textContent = formatRemainingTime(diff1);
      const secondCountdownEl = document.getElementById('second-countdown');
      if (secondBus && secondCountdownEl) {
        const diff2 = secondBus.departureTimestamp - now;
        secondCountdownEl.textContent = `あと ${formatRemainingTime(diff2, true)}`;
      }
    }
    
    // 4. 静的な情報を表示
    function displayStaticInfo() {
      if (nextBus) {
        mainTimeDiv.textContent = nextBus.time;
        detailsDiv.innerHTML = `<span class="detail-tag">${busStopNames[nextBus.busStop]}</span><span class="detail-tag">${nextBus.route}</span>`;
      } else {
        mainTimeDiv.textContent = "終了";
        detailsDiv.innerHTML = "";
        remainingTimeDiv.textContent = "お疲れ様でした";
      }
      if (secondBus) {
        secondNextBusDiv.innerHTML = `<div class="info"><span>その次は:</span><span class="time">${secondBus.time} 発</span><span>(${busStopNames[secondBus.busStop]} / ${secondBus.route})</span></div><div class="countdown" id="second-countdown"></div>`;
      } else {
        secondNextBusDiv.innerHTML = nextBus ? "これが最終バスです" : "";
      }
    }

    // 5. 残り時間フォーマット用ヘルパー
    function formatRemainingTime(ms, simple = false) {
      const totalSeconds = Math.round(ms / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      if (minutes < 1 && totalSeconds <= 10) return "まもなく発車";
      if (minutes < 1) return `あと ${seconds} 秒`;
      if (simple) return `${minutes}分`;
      return `あと ${minutes}分 ${String(seconds).padStart(2, '0')}秒`;
    }
    
    // --- ボタンの機能 ---

    // 6. バス停ボタンのイベントリスナー
    busStopButtons.forEach(button => {
      button.addEventListener('click', () => {
        busStopButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentStopId = button.dataset.stop;
        displayUpcomingBuses();
      });
    })

    // 7. 系統ボタンのイベントリスナー
    routeFilterButtons.forEach(button => {
      button.addEventListener('click', () => {
        routeFilterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentRouteFilter = button.dataset.route;
        displayUpcomingBuses();
      });
    });

    // 8. バス一覧を表示する関数
    function displayUpcomingBuses() {
      if (!currentStopId) return;
      const now = new Date().getTime();

      let upcomingBuses = allBusData.filter(bus => 
        bus.busStop === currentStopId && bus.departureTimestamp >= now
      );
      
      if (currentRouteFilter !== 'all') {
        upcomingBuses = upcomingBuses.filter(bus => bus.route === currentRouteFilter);
      }

      upcomingBusesResultDiv.innerHTML = ""; 
      if (upcomingBuses.length > 0) {
        upcomingBuses.forEach(bus => {
          const busItem = `<div class="bus-item"><div class="time">${bus.time} 発</div><div class="route">${bus.route}</div></div>`;
          upcomingBusesResultDiv.innerHTML += busItem;
        });
      } else {
        upcomingBusesResultDiv.innerHTML = `<p style="color: #888;">条件に合うバスはありません。</p>`;
      }
    }

    // 9. トップに戻るボタンのイベントリスナー
    window.onscroll = () => { 
      if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) { 
        backToTopButton.style.display = "block"; 
      } else { 
        backToTopButton.style.display = "none"; 
      } 
    };
    backToTopButton.addEventListener('click', () => { 
      window.scrollTo({top: 0, behavior: 'smooth'}); 
    });

  </script>
</body>
</html>
