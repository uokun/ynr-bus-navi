<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>バスナビ</title>
  <link rel="apple-touch-icon" href="apple-touch-icon.png">
  <link rel="icon" href="apple-touch-icon.png">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary: #3b82f6; --primary-hover: #2563eb; --secondary: #8b5cf6; --accent: #06b6d4;
      --bg-primary: #0c0c0e; --bg-secondary: #111115; --bg-tertiary: #1a1a20; --bg-card: rgba(255, 255, 255, 0.04);
      --bg-glass: rgba(255, 255, 255, 0.08); --bg-hover: rgba(255, 255, 255, 0.06);
      --text-primary: #ffffff; --text-secondary: #a1a1aa; --text-muted: #71717a;
      --border: rgba(255, 255, 255, 0.08);
      --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.4); --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.3);
      --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.25); --shadow-glow: 0 0 30px rgba(59, 130, 246, 0.15);
      --radius-lg: 16px; --radius-xl: 24px;
    }
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; background: var(--bg-primary);
      color: var(--text-primary); min-height: 100vh; padding: 16px; overflow-x: hidden;
      background-image: radial-gradient(circle at 25% 25%, rgba(59, 130, 246, 0.1) 0%, transparent 50%), radial-gradient(circle at 75% 75%, rgba(139, 92, 246, 0.08) 0%, transparent 50%), linear-gradient(180deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    }
    .container { max-width: 600px; margin: 0 auto; position: relative; animation: slideUp 0.6s cubic-bezier(0.16, 1, 0.3, 1); }
    @keyframes slideUp { from { opacity: 0; transform: translateY(40px); } to { opacity: 1; transform: translateY(0); } }
    .header { text-align: center; margin-bottom: 24px; }
    .title { font-size: clamp(2rem, 7vw, 2.5rem); font-weight: 800; background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 50%, var(--accent) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin-bottom: 8px; letter-spacing: -0.02em; }
    .subtitle { font-size: 0.875rem; color: var(--text-secondary); font-weight: 400; }
    .mode-switcher { display: flex; background: var(--bg-card); border: 1px solid var(--border); border-radius: var(--radius-lg); padding: 4px; margin-bottom: 24px; backdrop-filter: blur(20px); }
    .mode-button { flex: 1; padding: 12px 16px; border: none; background: transparent; color: var(--text-secondary); font-size: 0.875rem; font-weight: 500; cursor: pointer; border-radius: 12px; transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1); white-space: nowrap; }
    .mode-button.active { background: var(--primary); color: white; box-shadow: var(--shadow-sm); transform: scale(1.02); }
    .mode-button:hover:not(.active) { background: var(--bg-hover); color: var(--text-primary); }
    .clock { text-align: center; margin-bottom: 24px; }
    .current-time { font-size: clamp(1.75rem, 8vw, 2.25rem); font-weight: 700; color: var(--accent); font-variant-numeric: tabular-nums; text-shadow: 0 0 20px rgba(6, 182, 212, 0.3); }
    .main-card { background: var(--bg-card); backdrop-filter: blur(20px); border: 1px solid var(--border); border-radius: var(--radius-xl); padding: clamp(1.5rem, 5vw, 2rem); margin-bottom: 24px; box-shadow: var(--shadow-lg); position: relative; overflow: hidden; }
    .main-card::before { content: ''; position: absolute; top: 0; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, var(--primary), transparent); opacity: 0.5; }
    .main-card.loading { display: flex; align-items: center; justify-content: center; min-height: 200px; flex-direction: column; gap: 16px; }
    .loading-spinner { width: 32px; height: 32px; border: 3px solid var(--bg-tertiary); border-top: 3px solid var(--primary); border-radius: 50%; animation: spin 1s linear infinite; }
    @keyframes spin { to { transform: rotate(360deg); } }
    .card-actions { display: flex; justify-content: space-between; position: absolute; top: 16px; left: 16px; right: 16px; }
    .nav-button { padding: 8px 12px; background: var(--bg-glass); border: 1px solid var(--border); color: var(--text-secondary); border-radius: 12px; font-size: 0.75rem; font-weight: 500; cursor: pointer; transition: all 0.2s ease; backdrop-filter: blur(10px); }
    .nav-button:hover { background: var(--bg-hover); color: var(--text-primary); }
    .nav-button:disabled { opacity: 0.4; cursor: not-allowed; }
    .main-countdown { text-align: center; font-size: clamp(1.5rem, 5vw, 1.75rem); font-weight: 600; color: var(--accent); margin-bottom: 24px; min-height: 1.5em; padding-top: 24px; }
    .itinerary { display: flex; flex-direction: column; gap: 12px; }
    .itinerary-step { display: flex; flex-direction: column; align-items: center; text-align: center; padding: 12px; background: var(--bg-glass); border: 1px solid var(--border); border-radius: var(--radius-lg); }
    .step-time { font-size: clamp(1.75rem, 7vw, 2.25rem); font-weight: 700; color: var(--text-primary); font-variant-numeric: tabular-nums; margin-bottom: 4px; }
    .step-location { font-size: clamp(1rem, 3.5vw, 1.125rem); color: var(--text-secondary); font-weight: 500; }
    .itinerary-connector { display: flex; flex-direction: column; align-items: center; gap: 8px; margin: 8px 0; }
    .connector-icon { width: 32px; height: 32px; background: var(--primary); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 0.875rem; }
    .connector-text { font-size: 0.875rem; color: var(--text-muted); text-align: center; font-weight: 500; }
    .departure-time-main { font-size: clamp(2.5rem, 10vw, 3.5rem); font-weight: 800; text-align: center; background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin-bottom: 16px; line-height: 1.1; font-variant-numeric: tabular-nums; }
    .time-remaining-direct { font-size: 1.5rem; color: var(--accent); font-weight: 600; text-align: center; min-height: 1.5em; margin-bottom: 24px; }
    .details-direct { display: flex; justify-content: center; gap: 12px; flex-wrap: wrap; margin-bottom: 24px; }
    .detail-tag { padding: 8px 16px; background: var(--bg-glass); border: 1px solid var(--border); border-radius: var(--radius-lg); font-size: 0.875rem; font-weight: 500; color: var(--text-primary); transition: all 0.2s ease; }
    .divider { height: 1px; background: linear-gradient(90deg, transparent, var(--border), transparent); border: none; margin: 24px 0; }
    .second-bus { text-align: center; padding: 16px; background: var(--bg-tertiary); border-radius: var(--radius-md); border: 1px solid var(--border); }
    .second-bus-info { display: flex; align-items: center; justify-content: center; gap: 16px; flex-wrap: wrap; margin-bottom: 8px; font-size: 0.875rem; color: var(--text-secondary); }
    .second-bus-time { font-weight: 600; color: var(--accent); }
    .second-countdown { font-size: 0.75rem; color: var(--text-muted); }
    .lower-section { display: flex; flex-direction: column; gap: 24px; }
    .button-container { display: flex; justify-content: center; gap: 8px; flex-wrap: wrap; }
    .filter-button { padding: 10px 16px; font-size: 0.8125rem; border: 1px solid var(--border); border-radius: var(--radius-lg); background: var(--bg-card); color: var(--text-primary); cursor: pointer; transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1); backdrop-filter: blur(10px); white-space: nowrap; }
    .filter-button:hover { background: var(--bg-hover); transform: translateY(-2px); box-shadow: var(--shadow-md); }
    .filter-button.active { background: var(--primary); border-color: var(--primary); color: white; box-shadow: var(--shadow-glow); }
    .route-filter-button { padding: 8px 12px; font-size: 0.75rem; }
    .upcoming-buses { display: flex; flex-direction: column; gap: 12px; }
    .bus-item { background: var(--bg-card); border: 1px solid var(--border); border-radius: var(--radius-lg); padding: 16px; display: flex; justify-content: space-between; align-items: center; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); backdrop-filter: blur(10px); position: relative; overflow: hidden; }
    .bus-item::before { content: ''; position: absolute; left: 0; top: 0; width: 4px; height: 100%; background: var(--primary); }
    .bus-item:hover { background: var(--bg-hover); transform: translateX(8px); box-shadow: var(--shadow-lg); }
    .bus-time { font-size: 1.25rem; font-weight: 700; color: var(--text-primary); font-variant-numeric: tabular-nums; }
    .bus-route { padding: 6px 12px; background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 12px; font-size: 0.875rem; font-weight: 500; color: var(--text-secondary); }
    footer { margin-top: 64px; padding: 24px; background: var(--bg-card); border: 1px solid var(--border); border-radius: var(--radius-xl); text-align: center; backdrop-filter: blur(20px); }
    footer p { font-size: 0.8125rem; color: var(--text-muted); margin: 8px 0; line-height: 1.5; }
    footer a { color: var(--accent); text-decoration: none; font-weight: 500; transition: all 0.2s ease; }
    footer a:hover { color: var(--primary); text-decoration: underline; }
    .back-to-top { position: fixed; bottom: 24px; right: 24px; width: 48px; height: 48px; background: var(--primary); color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 1.25rem; font-weight: 600; box-shadow: var(--shadow-lg); transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); z-index: 100; display: none; }
    .back-to-top:hover { background: var(--primary-hover); transform: translateY(-4px); box-shadow: 0 12px 30px rgba(59, 130, 246, 0.4); }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1 class="title">バスナビ</h1>
      <p class="subtitle">v16.1</p>
    </div>
    <div class="mode-switcher">
      <button class="mode-button active" data-mode="to_kamiooka">南陵方面 → 上大岡</button>
      <button class="mode-button" data-mode="from_kamiooka">上大岡 → 古泉</button>
    </div>
    <div class="clock"><div class="current-time" id="currentTime">--:--:--</div></div>
    <div class="main-card loading" id="nextBusResult">
      <div class="loading-spinner"></div>
      <div>読み込み中...</div>
    </div>
    <div class="lower-section" id="lowerSection">
      <div class="button-container" id="busStopContainer">
        <button class="filter-button" data-stop="yokodaikita">洋光台北口</button>
        <button class="filter-button" data-stop="hinosyo">日野小学校前</button>
        <button class="filter-button" data-stop="hinotyuokouen">日野中央公園入口</button>
      </div>
      <div class="button-container" id="routeFilterContainer">
        <button class="filter-button route-filter-button" data-route="all">すべて</button>
        <button class="filter-button route-filter-button" data-route="市営111">市営111</button>
        <button class="filter-button route-filter-button" data-route="市営64">市営64</button>
        <button class="filter-button route-filter-button" data-route="市営2">市営2</button>
      </div>
      <div class="upcoming-buses" id="upcomingBusesResult"></div>
    </div>
  </div>
  <footer>
    <p>最終更新日: 2025/08/09</p>
    <p>この時刻が間違っていても責任は負いかねます。<br>正確な情報は<a href="https://www.city.yokohama.lg.jp/kotsu/bus/" target="_blank" rel="noopener noreferrer">横浜市営バス公式サイト</a>をご確認ください。</p>
  </footer>
  <button class="back-to-top" id="backToTopButton">↑</button>

  <script>
    const API_URL = "./bus_data.json";
    const TRANSFER_BUFFER_MINUTES = 5;
    let allBusData = [], allOptimalPairs = [], optimalPairIndex = 0;
    let nextBusFromKamiooka = null, secondBusFromKamiooka = null;
    const busStopNames = { yokodaikita: "洋光台北口", hinosyo: "日野小学校前", hinotyuokouen: "日野中央公園入口", kamioooka: "上大岡駅前", kosen: "古泉" };
    let currentMode = 'to_kamiooka', currentStopId = null, currentRouteFilter = 'all';
    
    const modeButtons = document.querySelectorAll('.mode-button');
    const lowerSection = document.getElementById('lowerSection');
    const busStopContainer = document.getElementById('busStopContainer');
    const routeFilterContainer = document.getElementById('routeFilterContainer');
    const currentTimeDiv = document.getElementById('currentTime');
    const busStopButtons = document.querySelectorAll('#busStopContainer .filter-button');
    const routeFilterButtons = document.querySelectorAll('#routeFilterContainer .filter-button');
    const nextBusResultDiv = document.getElementById('nextBusResult');
    const upcomingBusesResultDiv = document.getElementById('upcomingBusesResult');

    document.addEventListener('DOMContentLoaded', async () => {
      setInterval(() => { const now = new Date(); currentTimeDiv.textContent = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`; }, 1000);
      try {
        await getUserLocationAndSetMode();
        const response = await fetch(API_URL);
        const data = await response.json();
        const today = new Date();
        const y = today.getFullYear(), m = today.getMonth(), d = today.getDate();
        allBusData = data.map(bus => {
          const [h, min] = bus.time.split(':').map(Number);
          bus.departureTimestamp = new Date(y, m, d, h, min).getTime();
          if (bus.arrivalTime) { const [ah, amin] = bus.arrivalTime.split(':').map(Number); bus.arrivalTimestamp = new Date(y, m, d, ah, amin).getTime(); }
          return bus;
        }).sort((a, b) => a.departureTimestamp - b.departureTimestamp);
        nextBusResultDiv.classList.remove('loading');
        findAndDisplay();
        updateLowerSection();
        setInterval(updateCountdowns, 1000);
        setInterval(findAndDisplay, 30000);
        document.querySelector('.filter-button[data-route="all"]').classList.add('active');
      } catch (error) {
        console.error("エラー:", error);
        nextBusResultDiv.classList.remove('loading');
        if (error.code === 1) { nextBusResultDiv.innerHTML = '<div style="text-align: center; color: var(--text-secondary);">位置情報が許可されませんでした。<br>手動でモードを選択してください。</div>'; } 
        else { nextBusResultDiv.innerHTML = '<div style="text-align: center; color: var(--error);">データの取得に失敗しました</div>'; }
      }
    });

    function getUserLocationAndSetMode() {
        return new Promise((resolve, reject) => {
            if (!navigator.geolocation) { resolve(); return; }
            const LOCATIONS = { nanryo: { lat: 35.385, lon: 139.585 }, kamiooka: { lat: 35.409, lon: 139.595 } };
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude: userLat, longitude: userLon } = position.coords;
                    const distToNanryo = getDistance(userLat, userLon, LOCATIONS.nanryo.lat, LOCATIONS.nanryo.lon);
                    const distToKamiooka = getDistance(userLat, userLon, LOCATIONS.kamiooka.lat, LOCATIONS.kamiooka.lon);
                    currentMode = (distToKamiooka < distToNanryo) ? 'from_kamiooka' : 'to_kamiooka';
                    modeButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.mode === currentMode));
                    resolve();
                },
                (error) => { console.warn(`位置情報取得エラー (${error.code}): ${error.message}`); reject(error); },
                { timeout: 10000 }
            );
        });
    }

    function getDistance(lat1, lon1, lat2, lon2) {
        const toRad = (deg) => deg * Math.PI / 180;
        const R = 6371;
        const dLat = toRad(lat2 - lat1), dLon = toRad(lon2 - lon1);
        const a = Math.sin(dLat / 2) ** 2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
        return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    }

    modeButtons.forEach(button => {
      button.addEventListener('click', () => {
        modeButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentMode = button.dataset.mode;
        findAndDisplay();
        updateLowerSection();
      });
    });

    // ★★★ ロジックを修正 ★★★
    function updateLowerSection() {
        if (currentMode === 'to_kamiooka') {
            lowerSection.style.display = 'flex';
            busStopContainer.style.display = 'flex';
            routeFilterContainer.style.display = 'flex';
            if (!currentStopId) {
                upcomingBusesResultDiv.innerHTML = `<p style="color: var(--text-muted); text-align: center; padding: 20px;">上のバス停ボタンを押して詳細を表示</p>`;
            } else {
                displayUpcomingBuses();
            }
        } else { // from_kamiooka
            lowerSection.style.display = 'block'; // block に変更
            busStopContainer.style.display = 'none'; // 非表示
            routeFilterContainer.style.display = 'none'; // 非表示
            displayKamiookaBusList();
        }
    }
    
    function findAndDisplay() { /* ... */ } // (省略)
    function findOptimalTransfers() { /* ... */ } // (省略)
    function displayTransferInfo() { /* ... */ } // (省略)
    function displayDirectBusInfo() { /* ... */ } // (省略)
    function updateCountdowns() { /* ... */ } // (省略)
    function formatRemainingTime(ms, simple = false) { /* ... */ } // (省略)
    function displayKamiookaBusList() { /* ... */ } // (省略)
    
    // 以下、変更なしの関数群
    const backToTopButton = document.getElementById('backToTopButton');
    busStopButtons.forEach(button => { button.addEventListener('click', () => { busStopButtons.forEach(btn => btn.classList.remove('active')); button.classList.add('active'); currentStopId = button.dataset.stop; displayUpcomingBuses(); }); });
    routeFilterButtons.forEach(button => { button.addEventListener('click', () => { routeFilterButtons.forEach(btn => btn.classList.remove('active')); button.classList.add('active'); currentRouteFilter = button.dataset.route; displayUpcomingBuses(); }); });
    function displayUpcomingBuses() { if (!currentStopId) return; const now = new Date().getTime(); let upcomingBuses = allBusData.filter(bus => bus.busStop === currentStopId && bus.departureTimestamp >= now); if (currentRouteFilter !== 'all') { upcomingBuses = upcomingBuses.filter(bus => bus.route === currentRouteFilter); } upcomingBusesResultDiv.innerHTML = ""; upcomingBusesResultDiv.classList.add('fade-in'); if (upcomingBuses.length > 0) { upcomingBuses.forEach(bus => { const busItem = `<div class="bus-item"><div class="bus-time">${bus.time} 発</div><div class="bus-route">${bus.route}</div></div>`; upcomingBusesResultDiv.innerHTML += busItem; }); } else { upcomingBusesResultDiv.innerHTML = `<p style="color: var(--text-muted); text-align: center; padding: 20px;">条件に合うバスはありません。</p>`; } }
    window.onscroll = () => { if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) { backToTopButton.style.display = "block"; } else { backToTopButton.style.display = "none"; } };
    backToTopButton.addEventListener('click', () => { window.scrollTo({top: 0, behavior: 'smooth'}); });
  </script>
  <script>
    // 省略した関数の完全なコード
    function findAndDisplay() { if (currentMode === 'to_kamiooka') { optimalPairIndex = 0; allOptimalPairs = findOptimalTransfers(); displayTransferInfo(); } else { const now = new Date().getTime(); const available = allBusData.filter(b => b.busStop === 'kamioooka' && b.departureTimestamp >= now); nextBusFromKamiooka = available[0] || null; secondBusFromKamiooka = available[1] || null; displayDirectBusInfo(); } }
    function findOptimalTransfers() { const now = new Date().getTime(); const transferBufferMs = TRANSFER_BUFFER_MINUTES * 60 * 1000; const futureToKamiooka = allBusData.filter(b => ['yokodaikita', 'hinosyo', 'hinotyuokouen'].includes(b.busStop) && b.departureTimestamp >= now); const futureFromKamiooka = allBusData.filter(b => b.busStop === 'kamioooka' && b.departureTimestamp >= now); if (!futureToKamiooka.length || !futureFromKamiooka.length) return []; const pairs = []; for (const departureBus of futureToKamiooka) { if (!departureBus.arrivalTimestamp) continue; const connectingBus = futureFromKamiooka.find(transferBus => transferBus.departureTimestamp >= (departureBus.arrivalTimestamp + transferBufferMs)); if (connectingBus) { if (!pairs.some(p => p.connectingBus.time === connectingBus.time)) { pairs.push({ departureBus, connectingBus }); } } } return pairs; }
    function displayTransferInfo() { const optimalPair = allOptimalPairs[optimalPairIndex]; if (optimalPair) { const { departureBus, connectingBus } = optimalPair; const waitTimeMin = Math.floor((connectingBus.departureTimestamp - departureBus.arrivalTimestamp) / (1000 * 60)); const prevButtonDisabled = (optimalPairIndex <= 0) ? 'disabled' : ''; const nextButtonDisabled = (optimalPairIndex >= allOptimalPairs.length - 1) ? 'disabled' : ''; nextBusResultDiv.innerHTML = `<div class="card-actions"><button class="nav-button" id="prev-option-btn" ${prevButtonDisabled}>← 前の候補</button><button class="nav-button" id="next-option-btn" ${nextButtonDisabled}>次の候補 →</button></div><div class="main-countdown" id="main-countdown"></div><div class="itinerary"><div class="itinerary-step"><div class="step-time">${departureBus.time}</div><div class="step-location">${busStopNames[departureBus.busStop]}</div></div><div class="itinerary-connector"><div class="connector-icon">🚌</div><div class="connector-text">${departureBus.route} 上大岡行</div></div><div class="itinerary-step"><div class="step-time">${departureBus.arrivalTime}</div><div class="step-location">上大岡駅 到着</div></div><div class="itinerary-connector"><div class="connector-icon">${waitTimeMin}分</div><div class="connector-text">乗り換え</div></div><div class="itinerary-step"><div class="step-time">${connectingBus.time}</div><div class="step-location">上大岡駅 発車</div></div><div class="itinerary-connector"><div class="connector-icon">🚌</div><div class="connector-text">${connectingBus.route}</div></div><div class="itinerary-step"><div class="step-time">${connectingBus.arrivalTime}</div><div class="step-location">古泉 到着</div></div></div>`; document.getElementById('prev-option-btn').addEventListener('click', () => { if (optimalPairIndex > 0) { optimalPairIndex--; displayTransferInfo(); } }); document.getElementById('next-option-btn').addEventListener('click', () => { if (optimalPairIndex < allOptimalPairs.length - 1) { optimalPairIndex++; displayTransferInfo(); } }); } else { nextBusResultDiv.innerHTML = `<div style="text-align: center;"><div class="departure-time-main">終了</div><div class="time-remaining-direct">最適な接続がありません</div></div>`; } }
    function displayDirectBusInfo() { if (nextBusFromKamiooka) { const secondBusHTML = secondBusFromKamiooka ? `<div class="second-bus"><div class="second-bus-info"><span>その次は:</span><span class="second-bus-time">${secondBusFromKamiooka.time} 発</span><span>(${busStopNames[secondBusFromKamiooka.busStop]} / ${secondBusFromKamiooka.route})</span></div><div class="second-countdown" id="second-countdown"></div></div>` : `<div class="second-bus">これが最終バスです</div>`; nextBusResultDiv.innerHTML = `<div style="text-align: center;"><div class="departure-time-main">${nextBusFromKamiooka.time}</div><div class="time-remaining-direct" id="main-countdown"></div><div class="details-direct"><span class="detail-tag">${busStopNames[nextBusFromKamiooka.busStop]}</span><span class="detail-tag">${nextBusFromKamiooka.route}</span></div><hr class="divider">${secondBusHTML}</div>`; } else { nextBusResultDiv.innerHTML = `<div style="text-align: center;"><div class="departure-time-main">終了</div><div class="time-remaining-direct">お疲れ様でした</div></div>`; } }
    function updateCountdowns() { const now = new Date().getTime(); let busToTrack; if (currentMode === 'to_kamiooka') { const optimalPair = allOptimalPairs[optimalPairIndex]; busToTrack = optimalPair ? optimalPair.departureBus : null; const countdownEl = document.getElementById('main-countdown'); if (busToTrack && countdownEl) { const diff = busToTrack.departureTimestamp - now; if (diff < 0) { findAndDisplay(); return; } countdownEl.textContent = formatRemainingTime(diff); } } else { busToTrack = nextBusFromKamiooka; const secondCountdownEl = document.getElementById('second-countdown'); if (secondBusFromKamiooka && secondCountdownEl) { secondCountdownEl.textContent = `あと ${formatRemainingTime(secondBusFromKamiooka.departureTimestamp - now, true)}`; } const countdownEl = document.getElementById('main-countdown'); if (busToTrack && countdownEl) { const diff = busToTrack.departureTimestamp - now; if (diff < 0) { findAndDisplay(); return; } countdownEl.textContent = formatRemainingTime(diff); } } }
    function formatRemainingTime(ms, simple = false) { const totalSeconds = Math.round(ms / 1000); const minutes = Math.floor(totalSeconds / 60); const seconds = totalSeconds % 60; if (minutes < 1 && totalSeconds <= 10) return "まもなく発車"; if (minutes < 1) return `あと ${seconds} 秒`; if (simple) return `${minutes}分`; return `あと ${minutes}分 ${String(seconds).padStart(2, '0')}秒`; }
    function displayKamiookaBusList() { const now = new Date().getTime(); const upcomingBuses = allBusData.filter(bus => bus.busStop === 'kamioooka' && bus.departureTimestamp >= now); if (upcomingBuses.length > 0) { upcomingBusesResultDiv.innerHTML = upcomingBuses.map(bus => `<div class="bus-item"><div class="bus-time">${bus.time} 発</div><div class="bus-route">${bus.route}</div></div>`).join(''); } else { upcomingBusesResultDiv.innerHTML = `<p style="color: var(--text-muted); text-align: center; padding: 20px;">本日のバスは終了しました。</p>`; } }
  </script>
</body>
</html>
