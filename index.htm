<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>俺専用バスナビ v5.0 (Live)</title>
  
  <!-- アイコン指定（変更なし） -->
  <link rel="apple-touch-icon" href="apple-touch-icon.png">
  <link rel="icon" href="apple-touch-icon.png">

  <!-- スタイルシート（見た目） -->
  <style>
    body {
      background-color: #1a1a1a;
      color: #e6e6e6;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      margin: 0;
      padding: 15px;
      text-align: center;
    }
    .container {
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
    }
    h1 { font-size: 1.5em; color: #ccc; }
    
    #nextBusResult {
      background-color: #2c2c2c;
      border-radius: 12px;
      padding: 20px;
      margin: 20px 0;
    }
    /* ★★★ 「次のバス」表示エリアを更新 ★★★ */
    .next-bus-label { font-size: 0.9em; color: #aaa; margin-bottom: 8px; }
    #nextBusResult .minutes-left {
      font-size: clamp(2.2em, 10vw, 2.8em);
      font-weight: bold;
      color: #58a6ff;
    }
    #nextBusResult .departure-time {
      font-size: 1em;
      color: #aaa;
      margin-top: 5px;
    }
    #nextBusResult .details {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 12px;
      flex-wrap: wrap;
    }
    .detail-tag, .route-tag { /* ... 既存スタイル ... */ }
    
    /* ★★★ 現在時刻表示用のスタイル ★★★ */
    #currentTimeDisplay {
        margin-top: 30px;
        font-size: 1em;
        color: #777;
    }

    /* ... ボタンやバスリストのスタイルは変更なし ... */
  </style>
</head>
<body>

  <div class="container">
    <h1>俺専用バスナビ</h1>
    <!-- ★★★ 現在時刻表示用の要素を追加 ★★★ -->
    <div id="currentTimeDisplay">--:--:--</div>

    <div id="nextBusResult">
      <!-- ★★★ 表示構造を「あと何分」に対応させる ★★★ -->
      <div class="next-bus-label">次のバス</div>
      <div class="minutes-left">検索中...</div>
      <div class="departure-time"></div>
      <div class="details"></div>
    </div>
    
    <!-- ... ボタンやフッター、トップに戻るボタンは変更なし ... -->
  </div>


  <!-- スクリプト（頭脳） -->
  <script>
    // ... API_URLや定数の定義は変更なし ...

    // ★★★ HTML要素の取得を更新 ★★★
    const nextBusResultDiv = document.getElementById('nextBusResult');
    const currentTimeDisplay = document.getElementById('currentTimeDisplay');
    // ... 他のボタンなどの取得は変更なし ...


    // --- メインロジック ---

    // ページが読み込まれたら、まず全データを取得
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch(API_URL);
        allBusData = await response.json();
        allBusData.sort((a, b) => a.time.localeCompare(b.time));
        
        // 1秒ごとに時計と「次のバス」表示を更新するタイマーをセット
        setInterval(updateClockAndNextBus, 1000);

        // ... 初期化時のボタン設定などは変更なし ...
      } catch (error) {
        // ... エラー処理は変更なし ...
      }
    });


    // ★★★ 時計と「次のバス」をまとめて更新する、新しい心臓部関数 ★★★
    function updateClockAndNextBus() {
      const now = new Date();
      const hours = String(now.getHours()).padStart(2, '0');
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const seconds = String(now.getSeconds()).padStart(2, '0');
      
      // 1. 現在時刻を画面に表示
      currentTimeDisplay.textContent = `${hours}:${minutes}:${seconds}`;

      // 2. 次のバスを検索
      const targetStops = ['yokodaikita', 'hinosyo'];
      const fastestBus = allBusData.find(bus => {
        const [busHour, busMinute] = bus.time.split(':').map(Number);
        // 今日を基準にしたバスの時刻オブジェクトを作成
        const busDate = new Date();
        busDate.setHours(busHour, busMinute, 0, 0);
        return targetStops.includes(bus.busStop) && busDate > now;
      });

      // 3. 次のバス情報を表示
      const minutesLeftDiv = nextBusResultDiv.querySelector('.minutes-left');
      const departureTimeDiv = nextBusResultDiv.querySelector('.departure-time');
      const detailsDiv = nextBusResultDiv.querySelector('.details');

      if (fastestBus) {
        // 「あと何分」を計算
        const [busHour, busMinute] = fastestBus.time.split(':').map(Number);
        const busDate = new Date();
        busDate.setHours(busHour, busMinute, 0, 0);
        const diff = busDate - now; // ミリ秒の差
        const minutesLeft = Math.ceil(diff / (1000 * 60)); // 分に変換して切り上げ

        minutesLeftDiv.textContent = `あと ${minutesLeft} 分`;
        departureTimeDiv.textContent = `${fastestBus.time} 発`;
        detailsDiv.innerHTML = `
          <span class="detail-tag location-tag">${busStopNames[fastestBus.busStop]}</span>
          <span class="detail-tag route-tag">${fastestBus.route}</span>
        `;
      } else {
        minutesLeftDiv.textContent = "本日のバスは終了";
        departureTimeDiv.textContent = "お疲れ様でした";
        detailsDiv.innerHTML = "";
      }
    }
    
    // ... ボタンのイベントリスナーや、バス一覧表示の関数は変更なし ...

  </script>
</body>
</html>
